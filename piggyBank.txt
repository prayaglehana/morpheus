pragma solidity ^0.4.21;

import "./PGY.sol";

contract PiggyBank{
     PGY tokenContract;
     address[] public shareHolders;
     
     
     uint256 EM; // Exchange Module (total tokens)
     uint256 CM; // Contribution module ( total tokens)
     
     mapping(address => uint256) public CM_SHARE; //shares in CM ( token )
   
  // address constant public  tokenContractAddress= 0x708c3d8f7f12de6bbf4cca05f9a8e90a9a84f839;
    
    
  constructor () public{
        address ca=0x8062CcF1dD3fC509200D445D922B60c794242630;
         tokenContract= PGY(ca);
        
    }
    function getShare() public view returns(uint256){
        return CM_SHARE[msg.sender]*100/CM;  // % Contribution
    }
    function getTokenBalance() public view returns(uint256){
        return (CM_SHARE[msg.sender]);
    }
    function claimTokenBalance(uint256 amnt) public view returns(uint256){
        require(amnt<=CM_SHARE[msg.sender]);
        require(CM>=EM);
        uint256 toGet=(amnt*(CM+EM))/CM;
        CM_SHARE[msg.sender]=CM_SHARE[msg.sender]-amnt;
        EM=EM-(toGet-amnt);
        tokenContract.transferToken(address(this),msg.sender,toGet);
       
    }
    function depositTokens(uint256 t){
        tokenContract.transferToken(msg.sender,address(this),t);
        CM=CM+t;
        CM_SHARE[msg.sender]=CM_SHARE[msg.sender]+t;
     
    }
    function requestedTokens(uint256 t){
        EM=EM-t;
        tokenContract.transferToken(address(this),msg.sender,t);
    }
    function pushedTokens(uint256 t){
          EM=EM+t;
         tokenContract.transferToken(msg.sender,address(this),t);
         
    }
    

}

